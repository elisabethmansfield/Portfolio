/**********************************************
 Elisabeth Mansfield 
 (Server-Side Encoding)
**********************************************/

#include <assert.h> 
#include <errno.h>
#include <fcntl.h> 
#include <netdb.h> 
#include <netinet/in.h> 
#include <signal.h> 
#include <stdio.h>
#include <stdlib.h> 
#include <string.h> 
#include <sys/socket.h> 
#include <sys/stat.h>
#include <sys/types.h> 
#include <sys/wait.h> 
#include <unistd.h> 

// Create global listen socket variables
int listenSocketFD,portNumber;
struct sockaddr_in serverAddress;

// SIGINT signal handler
void catchSIGINT(int signo){
	// Close parent listening socket
	close(listenSocketFD);
	exit(0); 
}
			
// Error handling exit function
void error(const char *msg) { perror(msg); exit(1); } 

// Message encoding function
void encode(char* plaintext,char* key,char* ciphertext){

	// Create variables
	int i,plaintextFD,keyFD;
	ssize_t pread,kread;
	char pbuffer[100000],kbuffer[100000];
	memset(pbuffer,'\0',sizeof(pbuffer));
	memset(kbuffer,'\0',sizeof(kbuffer));

	// Open & read files
	plaintextFD = open(plaintext,O_RDONLY);
	if(plaintextFD == -1){ error("SERVER: ERROR opening plaintext file"); }
	keyFD = open(key,O_RDONLY);
	if(keyFD == -1){ error("SERVER: ERROR opening key file"); }
	pread = read(plaintextFD,pbuffer,sizeof(pbuffer));
	kread = read(keyFD,kbuffer,sizeof(kbuffer));

	// Strip off newlines
	pbuffer[pread-1] = '\0'; pread--;
	kbuffer[kread-1] = '\0'; kread--;
 
	// ENCRYPT
 	for(i=0;i<pread;i++){
		// if space
		if(pbuffer[i] == 32) pbuffer[i] = 91;
		if(kbuffer[i] == 32) kbuffer[i] = 91;

		// if invalid character
		if(pbuffer[i] < 65 || pbuffer[i] > 91){ error("SERVER: ERROR Invalid character in plaintext"); }	
		if(kbuffer[i] < 65 || kbuffer[i] > 91){ error("SERVER: ERROR Invalid character in key"); }

		// add ASCII's together & subtract 65
		ciphertext[i] = (pbuffer[i] + kbuffer[i]) - 65;

		// if modulus necessary
		if(ciphertext[i] > 91) ciphertext[i] -= 27;

		// if space
		if(ciphertext[i] == 91) ciphertext[i] = 32;
 	}

	// Add newline at end
	ciphertext[i] = '\n';

	// close files
	close(plaintextFD);
	close(keyFD); 		
}

// Main connects server & establishes connections
int main(int argc, char *argv[])
{
	// Create established socket variables
	const int MAXCOUNT = 5;
	int i,count = 0,index = 0,establishedConnectionFD;
	pid_t bgpids[MAXCOUNT]; for(i=0;i<MAXCOUNT;i++){ bgpids[i] = -5; }
	struct sockaddr_in clientAddress;
	socklen_t sizeOfClientInfo;

	// Verify command usage & args
	if (argc < 2) { error("SERVER: USAGE: otp_enc_d port"); } 

	// Set up the address struct for this process (the server)
	memset((char *)&serverAddress, '\0', sizeof(serverAddress)); // Clear out the address struct
	portNumber = atoi(argv[1]); // Get the port number, convert to an integer from a string
	serverAddress.sin_family = AF_INET; // Create a network-capable socket
	serverAddress.sin_port = htons(portNumber); // Store the port number
	serverAddress.sin_addr.s_addr = INADDR_ANY; // Any address is allowed for connection to this process

	// Set up the socket
	listenSocketFD = socket(AF_INET, SOCK_STREAM, 0); // Create the socket
	if (listenSocketFD < 0){ error("SERVER: ERROR opening socket"); }

	// Enable the socket to begin listening
	if (bind(listenSocketFD, (struct sockaddr *)&serverAddress, sizeof(serverAddress)) < 0) // Connect socket to port
		{ error("SERVER: ERROR on binding"); }
	listen(listenSocketFD, 5); // Flip the socket on - it can now receive up to 5 connections

	// initialize SIGINT signal handler for CTRL-C
 	struct sigaction z = {0};
		z.sa_handler = catchSIGINT;
		sigfillset(&z.sa_mask);
	//	z.sa_flags = SA_RESTART;
		sigaction(SIGINT,&z,NULL);

	// Start accepting connections
	while(1){

	    // Create child process variables
	    pid_t childpid = -5;
	    int exitstatus=-5;

	    if(count >= MAXCOUNT){
		perror("SERVER: ERROR all sockets in use");
		sleep(1);
	    }
	    else{ // if socket available

		// Accept a connection, blocking if one is not available until one connects
		sizeOfClientInfo = sizeof(clientAddress); // Get the size of the address for the client that will connect
		establishedConnectionFD = accept(listenSocketFD, (struct sockaddr *)&clientAddress, &sizeOfClientInfo); // Accept
		if (establishedConnectionFD < 0){ perror("SERVER: ERROR on accept"); }

		// make child process
		childpid = fork();
		switch(childpid){
			// if fork error
			case -1:
				perror("SERVER: ERROR fork process"); 
				break;
			// child process
			case 0:
				// Create message variables
				int charsRead,charsWritten,maxWritten,charsInCipher;
				char buffer[256],needle[3] = "@@"; memset(buffer, '\0', 256);
				char cipherLength[6]; memset(cipherLength,'\0',6);
				char* cur;
				char confirmation[1];
				char* plaintext = (char*) calloc(256,sizeof(char)); assert(plaintext != 0);
				char* key = (char*) calloc(256,sizeof(char)); assert(key != 0);
				char* ciphertext = (char*) calloc(100000,sizeof(char)); assert(ciphertext != 0);

				// Parse the message from the client 
				charsRead = recv(establishedConnectionFD, buffer, 255, 0); 
				if (charsRead < 0){ perror("SERVER: ERROR reading from socket"); }
				if (buffer[0] != 'E'){
					// Send confirmation message to client
					confirmation[0] = 'N'; 
					send(establishedConnectionFD,confirmation,sizeof(confirmation), 0);
					exit(2); 
				}
				else{
					// Send confirmation message to client
					confirmation[0] = 'Y'; 
					send(establishedConnectionFD,confirmation,sizeof(confirmation), 0);
	
					// Parse for plaintext filename
					cur = &buffer[1];
					strcpy(plaintext,cur);
					cur = strstr(plaintext,needle);
					*cur = '\0';

					// Parse for key filename
					cur += (2 * sizeof(char));
					strcpy(key,cur);

					// Call encode function
					encode(plaintext,key,ciphertext);

					// Send strlen message to client
					charsInCipher = strlen(ciphertext);
					sprintf(cipherLength,"%d",charsInCipher);
					maxWritten = send(establishedConnectionFD,cipherLength,sizeof(cipherLength), 0);

					// Send encoded message to client 
					charsWritten = send(establishedConnectionFD,ciphertext,sizeof(ciphertext), 0); 
					if (charsWritten < 0){ perror("SERVER: ERROR writing to socket"); }
					while(charsWritten < charsInCipher){
						cur = &ciphertext[charsWritten];
						charsWritten += send(establishedConnectionFD,cur,sizeof(cur), 0); 
					}

					// Close child socket
					close(establishedConnectionFD); // Close the existing socket with client

					// Exit child process
					exit(0);
				}

				// Free dynamic memory 
				free(ciphertext);
				free(plaintext);
				free(key);

				break;
			// parent process
			default:
				// Increment socket count
				count++;
				bgpids[index] = childpid;
				break;
		} // end switch
	    } // end else statement

	    // Get exit status for children
  	    for(i=0;i<MAXCOUNT;i++){
		if(bgpids[i] > 0){
			childpid = waitpid(bgpids[i], &exitstatus, WNOHANG);
			if(childpid == bgpids[i]){
				bgpids[i] = -5;
				// Decrement socket count
				count--; 
			}
		}
		else if(bgpids[i] == -5){
			index = i;
		}
	    } // end for loop
	} // end while loop

	// Close parent listening socket
	close(listenSocketFD); 

	return 0; 
}
