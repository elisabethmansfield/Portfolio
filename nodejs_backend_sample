/* Elisabeth Mansfield */

var request = require('request'),
    express = require('express'),
    app = express(),
    bodyparser = require('body-parser'),
    mysql = require('./dbcon.js').pool,
    handlebars = require('express-handlebars').create({defaultLayout:'main'});
app.engine('handlebars',handlebars.engine);
app.set('view engine','handlebars');
app.set("port",50905);

app.use(express.static(__dirname + "/public/"));
app.use(bodyparser.json());
app.use(bodyparser.urlencoded({ extended:true}));

// root - select entry
app.get('/',function(req,res,next){
  var context = {};
  
  // use mysql to select info from the database 
  mysql.pool.query('SELECT id, name, reps, weight, DATE_FORMAT(date, "%Y-%m-%d") AS date, lbs FROM workouts;', function(err, rows, fields){
    if(err){
      next(err);
      return;
    }

    // store info from database into the workouts object
    workouts = {};
    workouts.row_info = [];
    for(row in rows){
      info = {};
      // If reps, weight, and date are NULL then store empty string
      if(!rows[row].reps){
          rows[row].reps = "";
        }
      if(!rows[row].weight){
          rows[row].weight = "";
        }
      if(rows[row].date == "0000-00-00"){
          rows[row].date = "";
        }
      info.id = rows[row].id;
      info.name = rows[row].name;
      info.reps = rows[row].reps;
      info.weight = rows[row].weight;
      info.date = rows[row].date;
      // If lbs is 1 then store "lbs" otherwise store "kgs"
      if(rows[row].lbs){
        rows[row].lbs = "lbs";
      } else{
        rows[row].lbs = "kgs";
      }
      info.lbs = rows[row].lbs;

      // push into workouts
      workouts.row_info.push(info);
    }
    context.data = workouts;
    
    // render home handlebars template using info from context
    res.render('home', context);
  });
});

// insert into database
app.get('/insert',function(req,res,next){
    var context = {};
    var name = req.query.name;
    var reps = req.query.reps;
    var weight = req.query.weight;
    var date = req.query.date;
    var lbs = req.query.lbs;
    
    // insert into database using query params
   mysql.pool.query("INSERT INTO workouts (name, reps, weight, date, lbs) VALUES (?, ?, ?, ?, ?)", 
    [name, reps, weight, date, lbs], function(err, result){
        if(err){
          next(err);
          return;
        }
        context.idNum = result.insertId;
        res.send(JSON.stringify(context));
  });
});

// edit entry in database
app.get('/edit',function(req,res,next){
  var context = {};
  
  // select all info from database table
  mysql.pool.query('SELECT id, name, reps, weight, DATE_FORMAT(date, "%Y-%m-%d") AS date, lbs FROM workouts WHERE id=?', [req.query.id], function(err, rows, fields){
    if(err){
      next(err);
      return;
    }

    // store info into getParams array
    var getParams = [];
    for(row in rows) {
      if(!rows[row].reps){
          rows[row].reps = "";
        }
      if(!rows[row].weight){
          rows[row].weight = "";
        }
      if(rows[row].date == "0000-00-00"){
          rows[row].date = "";
        }
      var addParam = {
        'id': rows[row].id,
        'name': rows[row].name,
        'reps': rows[row].reps,
        'weight': rows[row].weight,
        'date': rows[row].date,
        'lbs': rows[row].lbs
      };

      getParams.push(addParam);
    }
    context.data = getParams[0];
    
    // Go to edit page with info from context
    res.render('edit', context);
  });
});

// update entry in database
app.get('/update',function(req,res,next){
    var name = req.query.name;
    var reps = req.query.reps;
    var weight = req.query.weight;
    var date = req.query.date;
    var lbs = req.query.lbs;
    var id = req.query.id;
    
    // update only if name is filled out
    if(name != ""){
      mysql.pool.query("UPDATE workouts SET name=?, reps=?, weight=?, date=?, lbs=? WHERE id=?", 
        [name, reps, weight, date, lbs, id], function(err, result){
        if(err){
          next(err);
          return;
        }
        res.redirect("/");
      });
    } else{
        res.redirect("/");
    }
});

// delete entry in database
app.get('/delete', function(req, res, next) {
    var context = {}; 
    
    // delete row from database with id from query param  
    mysql.pool.query("DELETE FROM `workouts` WHERE id = ?", [req.query.id], 
        function(err, result) {
            if(err){
                next(err);
                return;
            }
    });
});

// reset table
app.get('/reset-table',function(req,res,next){
  var context = {};
  
  // drop database table 
  mysql.pool.query("DROP TABLE IF EXISTS workouts", function(err){
    var createString = "CREATE TABLE workouts("+
    "id INT PRIMARY KEY AUTO_INCREMENT,"+
    "name VARCHAR(255) NOT NULL,"+
    "reps INT,"+
    "weight INT,"+
    "date DATE,"+
    "lbs BOOLEAN)";
    mysql.pool.query(createString, function(err){
      context.results = "Table reset";
      res.render('homepage',context);
    })
  });
});

app.use(function(req,res){
  res.status(404);
  res.render('404');
});

app.use(function(err, req, res, next){
  console.error(err.stack);
  res.status(500);
  res.render('500');
});

app.listen(app.get("port"),function(){
  console.log("Started on port "+ app.get('port'));
});
